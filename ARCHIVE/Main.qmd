---
title: "Predicting Gait Kinematics from Clinical Data"
Author: "Michael H. Schwartz^1^, ^2^, Andrew G. Georgiadis^1^, ^2^, and Andrew J. Ries"
Date: ""

bibliography: references.bib
csl: computers-in-biology-and-medicine.csl

format:
  docx:
    toc: false
    number-sections: true
    number-depth: 1
    highlight-style: github
    reference-doc: word-template.docx
    fig-dpi: 600
    
execute:
    echo: false
    warning: false
    message: false
    error: false
---

```{r}
#| echo: false
#| message: false

# Set memory for BART -----
options(java.parameters = "-Xmx32g")


# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(patchwork)
library(ggtext)
library(RColorBrewer)
library(glue)
library(gt)
library(gtsummary)
library(ggpmisc)
library(bartMachine)


# User Functions ---------------------------------------------------------------
margin <- ggplot2::margin
source("SCRIPTS/get_meas.R")
source("SCRIPTS/get_pred.R")
source("SCRIPTS/get_recon.R")
source("SCRIPTS/predict_scores.R")


# Make ggplot2 theme -----------------------------------------------------------
theme_mhs <- theme_minimal() 
theme_mhs <- theme_mhs %+replace%
  theme(
    plot.title = element_text(size = 10, hjust = 0),
    plot.subtitle = element_text(size = 7, hjust = 0),
    legend.text = element_text(size = 6),
    legend.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    axis.title = element_text(size = 8),
    strip.text = element_text(size = 5),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(linewidth = .2, color = "grey85")
  )

theme_set(theme_mhs)


# For trimming white space around figures --------------------------------------
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```

# Read and organize TD gait data 

```{r}
td <- read_csv("DATA/ControlKinematicsFMC.csv")

# Fix names --------------------------------------------------------------------
temp <- str_split_fixed(td$Row, "_", 2)
var <- temp[,1]
t <- temp[,2]

var <- glue("Ang_{var}")
var <- str_replace_all(var, "Tra", "_Trn")
var <- str_replace_all(var, "Sag", "_Sag")
var <- str_replace_all(var, "Cor", "_Cor")
var <- str_replace_all(var, "Knee", "Kne")
var <- str_replace_all(var, "Pelvis", "Pel")
var <- str_replace_all(var, "Ankle", "Ank")
var <- str_replace_all(var, "FootProgress", "Foo")
var <- str_replace_all(var, "Trunk", "Trk")
var <- str_sub(var, 5, 11)
var <- str_replace(var, "_", "_Ang_")
td$var <- var
td$t <- t
td <- 
  td %>% 
  mutate(Row = NULL) %>% 
  relocate(c(var, t)) %>% 
  mutate(t = 2*(as.numeric(t)-1))


# Get TD "avg" (lwr, med, upr) -------------------------------------------------
tdavg <- 
  td %>% 
  pivot_longer(-c(var, t)) %>% 
  mutate(name = str_replace(name, "_L|_R", "")) %>% 
  mutate(name = str_replace(name, "\\d+$", "")) %>% 
  group_by(var, name, t) %>% 
  mutate(
    LRavg = mean(value)
  ) %>% 
  select(-value) %>% 
  rename(value = LRavg) %>% 
  distinct() %>% 
  ungroup() %>% 
  select(-name) %>% 
  group_by(var, t) %>% 
  mutate(
    lwr = quantile(value, probs = .025),
    med = quantile(value, probs = .5),
    upr = quantile(value, probs = .975)
  ) %>% 
  select(-value) %>% 
  distinct() %>% 
  mutate(
    var = str_replace_all(var, "_", "."),
    type = "TD"
  ) %>% 
  rename(value = med)

```

# Read in average gait data

```{r}
dataroot <- "C:/Users/mschwartz/OneDrive - Gillette Children's Specialty Healthcare/Read C3D/OUTPUT"
load(glue({dataroot},"/data_avg_current.RData"))
```

# Organize average data 

```{r}
# Set target curve -------------------------------------------------------------
target = "Pel.Ang.Sag|Hip.Ang.Sag|Kne.Ang.Sag|Ank.Ang.Sag"
# target = "Pel.Ang.Trn|Hip.Ang.Trn|Kne.Ang.Trn|Foo.Ang.Trn"
# target = "Pel.Mom.Trn|Hip.Mom.Trn"
# target = "Ank.Ang.Sag"
targetx <- str_replace_all(target, "\\.", "_")


# Choose variable class (Ang, Mom, Pwr, Rxn) -----
vclass <- str_extract(target, "\\.([^\\.]+)\\.")
vclass <- str_remove_all(vclass, "\\.")
vclass <- glue("{vclass}_avg")

# Arrange -----
dd <- 
  list_rbind(get(vclass)) %>% 
  filter(Year > 2005)

ddw <- 
  dd %>% 
  select(side, t, name, Exam_ID, value) %>%
  pivot_wider(names_from = c(side, Exam_ID), values_from = value) %>% 
  arrange(name, t)

# Remove columns with missing data -----
ddw <- ddw %>% select(-which(colSums(is.na(ddw)) > 0))
```


## Compute feature decomposition  

```{r}
# Get matrix of values ---------------------------------------------------------
x <- 
  ddw %>% 
  filter(str_detect(name, target)) %>%
  select(starts_with(c("L", "R"))) %>% 
  as.matrix()


# Get names of feature values --------------------------------------------------
fnames <- 
  ddw %>% 
  filter(str_detect(name, target)) %>%
  select(name) 


# Get 10  features -------------------------------------------------------------
res <- svd(x)
features <- res$u[, 1:10]


# Organize features ------------------------------------------------------------
f <- as_tibble(features) %>% 
  mutate(
    var = fnames$name,
    t = rep(seq(0, 100, 2), nrow(features)/51)
  ) %>% 
  relocate(t, var) %>% 
  pivot_longer(-c(t, var)) %>% 
  rename(feature = name) %>% 
  mutate(
    feature = fct_inorder(feature)
  )

scores <- as_tibble(t(res$u)[1:10,] %*% x)


# Organize scores --------------------------------------------------------------
s <- 
  scores %>% 
  mutate(sname = glue("Feat_target_{row_number()}")) %>% 
  relocate(sname) %>% 
  pivot_longer(-sname, names_to = c("side", "Exam_ID"), names_sep = "_") %>% 
  pivot_wider(names_from = sname, values_from = value)
```

## Get database data

```{r}
#| include: false
#| label: read-organize-data

# Read and organize data -------------------------------------------------------
dat0 <- readRDS("DATA/FD_2023-09-13.RDS")

dat <- 
  dat0 %>% 
  filter(
    # dx == "Cerebral palsy",
    age <= 25,
    !is.na(GDI),
    Sex != "Missing",
    Event_Date > as.Date("2005-12-31")
  ) %>% 
  mutate(
    dxmod = fct_drop(dxmod),
    dxmod = fct_lump_min(dxmod, 10, other_level = "Missing"),
    Year = year(Event_Date)
  ) %>% 
  filter(
    !is.na(Feat_Ang_1),
    between(Feat_Ang_1, -625, 0), 
    between(Feat_Ang_2, -350, 750)
  ) %>% 
  tibble()


# Split FDODFEO into FDO + DFEO ------------------------------------------------
dat$prior_Femoral_Derotation_Osteotomy <- dat$prior_Femoral_Derotation_Osteotomy + dat$prior_FDO_DFEO
dat$prior_DFEO <- dat$prior_DFEO + dat$prior_FDO_DFEO
dat <- dat %>% select(-prior_FDO_DFEO)


# Choose Features --------------------------------------------------------------
v <- names(dat)

# Diagnosis
vdx <- c("dxmod", "affected")
# Descriptive
vdesc <- c("age", "HEIGHT", "WEIGHT", "Sex", "SIDE")
# Birth History
vbirth <- c("NICU_Weeks", "Delivery_Weeks", "Ventilator_Weeks")
# Developmental History
vdev <- c("AGE_AT_DIAG", "DEV_FIRST_STEP", "DEV_WALK")
# Physical therapy program
vpt <- c("PTfreq", "PTprog")
# Function
vfunc <- c("GMFCS", "FAQ", "FAQT")
# Prior treatment
vprior <- str_subset(v, "(?!.*Post)^prior")
# vprior <- str_subset(v, str_replace_all(big12, "interval", "prior"))
# vprior <- str_subset(vprior, "Post", negate = T)
# Range of motion
vrom <- c("HIP_EXT", "HIP_ABD_0", "POP_ANG_UNI", "KNEE_EXT", "EXTEN_LAG", 
          "ANK_DORS_0", "ANK_DORS_90")
# Bony torsion
vtor <- c("ANTEVERSION", "BIMAL")
# Foot
vfoot <- str_subset(v, "(?!.*Post)(^WB_|^NWB_)")
# Neurological exam
vneuro <- str_subset(v, "SEL$|STR$|SPAS$")
# Stride parameters - which could be obtained via stopwatch and clicker
# vstride <- c("NDspeed", "NDsteplen")

vcli <- c("Patient_ID", "Exam_ID", vdx, vdesc, vbirth, vdev, vpt, vfunc, vprior, 
          vrom, vtor, vfoot, vneuro)

```

# Add scores to data 

```{r}
# Add scores to dat
dat <- 
  dat %>% 
  left_join(s, by = c("SIDE" = "side", "Exam_ID" = "Exam_ID")) %>% 
  drop_na(starts_with("Feat_target"))
```

# Build models to predict feature scores

```{r}
#| cache: true
#| include: false
#| label: build-models

# Generate test/train split ----------------------------------------------------
set.seed(42)

ix <- sample(c(TRUE, FALSE), nrow(dat), replace=TRUE, prob=c(0.7,0.3))
dat_train <- dat[ix,]
dat_test <- dat[!ix,]


# Organize model data ----------------------------------------------------------
xmods <- 
  dat_train %>% 
  select(all_of(vcli)) %>% 
  select(-c(Patient_ID, Exam_ID)) %>% 
  data.frame()


# Generate models feature scores -----------------------------------------------
nftrain <- 10

for (kk in 1:nftrain) {
  y <- dat_train[[glue("Feat_target_{kk}")]]
  mod <- bartMachine(xmods, y, use_missing_data = T)
  assign(glue("mod{kk}"), mod)
}

```

# Compare prediction to measured 

```{r}
# choose exam and side ---------------------------------------------------------
# iscore <- which(predict(mod1, dat_test[names(mod1$X)]) < 0)
# ix <- sample(iscore, 1)

icrouch <- which(dat_test$meansta_Kne_Ang_Sag > 30 & dat_test$KNEE_EXT > 10)
ix <- sample(icrouch, 1)

# icalc <- which(dat_test$maxsta_Ank_Ang_Sag > 5)
# ix <- sample(icalc, 1)

# istiff <- which(dat_test$maxswi_Kne_Ang_Sag - dat_test$minsta_Kne_Ang_Sag < 40)
# ix <- sample(istiff, 1)

# ihams <- which(dat_test$ic_Kne_Ang_Sag > 25 & dat_test$POP_ANG_UNI > 70 & dat_test$KNEE_EXT < 5)
# ix <- sample(ihams, 1)

# ihip <- which(dat_test$meansta_Hip_Ang_Trn > 15 & dat_test$meansta_Kne_Ang_Trn < -30)
# ix <- sample(ihip, 1)

# ikneeint <- which(dat_test$BIMAL < 0 & dat_test$meansta_Kne_Ang_Trn > 0)
# ikneeext <- which(dat_test$BIMAL > 30 & dat_test$meansta_Kne_Ang_Trn < -25)
# ix <- sample(ikneeint, 1)

# iank <- which(dat_test$minsta_Ank_Ang_Sag < -25 & dat_test$ANK_DORS_90 < 5)

# ix <- sample(1:nrow(dat_test), 1)

ex <- dat_test$Exam_ID[[ix]]
sd <- dat_test$SIDE[[ix]]
xample <- dat_test[ix, names(mod1$X)]


# Choose number of features to use -----
nfuse = 5


# Get measured curves -----
measured <- 
  get_meas(dd, ex, sd, target) %>% 
  rename(var = name) %>% 
  mutate(
    var = fct_drop(var)
  ) %>% 
  mutate(
    type = "Measured",
    lwr = NA,
    upr = NA
  )


# Harmonize TD var factor levels -----
tdtemp <- 
  tdavg %>% 
  filter(var %in% measured$var) %>% 
  mutate(
    var = factor(var, levels = levels(measured$var)),
    value = NA)


# Get reconstructed curve -----
recon <- 
  get_recon(dat_test, ex, sd, features, targetx, nf = nfuse)%>% 
  mutate(
    var = factor(var, levels = c(1:max(var)), labels = levels(measured$var))
  ) %>% 
  mutate(
    type = "Reconstructed",
    lwr = NA,
    upr = NA
  )


# Get predicted curve -----
pred <- 
  get_pred(dat_test, ex, sd, features, 200, nf = nfuse) %>% 
  # pivot_longer(-c(var, t)) %>% 
  mutate(
    var = factor(var, levels = c(1:max(var)), labels = levels(measured$var))
  ) %>% 
  mutate(type = "predicted") %>% 
  rename(value = med)


# Organize results -----
temp <- 
  bind_rows(measured, pred, tdtemp)

ggplot(temp, aes(
  x = t,
  y = value,
  group = type,
  color = type,
  fill = type,
  linetype = type,
)) +
  facet_wrap(~ var, scales = "free_y") +
  geom_line(linewidth = 1) +
  geom_ribbon(
    aes(ymin = lwr, ymax = upr),
    color = NA,
    alpha = .1
  ) +
  ylab("Value") + 
  xlab("Percent Gait Cycle") +
  scale_color_manual(
    values = c("grey10", "grey40", NA),
    breaks = c("Measured", "predicted", "TD")
  ) +
  scale_fill_manual(
    values = c("grey10", "grey40", "dodgerblue3"),
    breaks = c("Measured", "predicted", "TD")
  ) +
  scale_linetype_manual(
    values = c("solid", "dashed", "solid"),
    breaks = c("Measured", "predicted", "TD")
  ) +
  guides(
    linetype = "none",
    fill = "none",
    color = guide_legend(title = "")) +
  theme(
    legend.position = "bottom",
    strip.text = element_text(margin=margin(b=2))
  )

ggsave("OUTPUT/junk.png", width = 6, height = 4, dpi = 300, bg = "white")

```

## Simulate Treatment

```{r}

# Simulate a treatment -----
dat_sim <- 
  dat_test %>% 
  mutate(ANK_DORS_90 = 15)

predsim <- 
  get_pred(dat_sim, ex, sd, features, 200, nf = 5) %>% 
  rename(
    lwr_sim = lwr,
    med_sim = med,
    upr_sim = upr
  ) %>% 
  pivot_longer(-c(var, t)) %>% 
  mutate(
    var = factor(var, levels = c(1:max(var)), labels = levels(measured$var))
  ) %>% 
  mutate(type = "predicted_sim")

```
