---
title: "Causal Treatment Effect Estimation By IPTW"
subtitle: ""
Author: "Michael H. Schwartz"
Date: ""

format:
  html:
    toc: true
    toc-depth: 3
    toc-location: left
    toc-title: "Section"
    fig-dpi: 600
    embed-resources: true
    theme:
      - cosmo
    grid:
      body-width: 1050px
      sidebar-width: 250px
      margin-width: 0px
      
lightbox: true

knitr:
  opts_chunk:
    warning: false
    message: false
    cache.lazy: false
    screenshot.force: true
    fig.path: FIGURES/

html-table-processing: none
    
execute:
  echo: false
  warning: false
  message: false
  error: false
---

```{r}
#| label: libraries-themes-etc
#| echo: false
#| message: false
#| warning: false

# Packages -----
options(java.parameters = "-Xmx32g")
library(bartMachine, verbose = F)
library(tidyverse, verbose = F)
library(lubridate, verbose = F)
library(patchwork, verbose = F)
library(ggtext, verbose = F)
library(RColorBrewer, verbose = F)
library(glue, verbose = F)
library(gt, verbose = F)
library(gtsummary, verbose = F)
library(ggpmisc, verbose = F)
library(MatchIt, verbose = F)
library(ggh4x, verbose = F)
library(extraDistr, verbose = F)
library(iml, verbose = F)
library(Hmisc, verbose = F)
library(colorspace, verbose = F)
library(MatchIt, verbose = F)
library(smd, verbose = F)

# User Functions -----
margin <- ggplot2::margin
summarize <- dplyr::summarize
select <- dplyr::select
formals(table)$useNA <- "ifany"
source("SCRIPTS/read_and_organize.R")
source("SCRIPTS/get_TD_NEW.R")
source("SCRIPTS/build_propensity_mod.R")
source("SCRIPTS/get_prop_model_vars.R")
source("SCRIPTS/get_varlabs.R")
source("SCRIPTS/get_pred_vars.R")
source("SCRIPTS/get_meanscores.R")

# Theme for ggplot2 -----
theme_mhs <- theme_minimal(base_size = 7) 
theme_mhs <- function(bs){
  theme_minimal(base_size = bs) %+replace%
    theme(
      panel.grid.minor = element_blank(),
      panel.grid.major = element_line(linewidth = .1, color = "grey85")
    )
}
theme_set(theme_mhs(7))

# For trimming white space around figures -----
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```

```{r}
#| label: get-TD-make-labels
#| include: false

# Read and organize TD gait data -----
tdavg <- get_TD_NEW()

# Get labels (variable, and pos/neg directions) -----
varlabs <- get_varlabs()
vlabs <- varlabs$Label
names(vlabs) <- varlabs$Variable 
xlabs <- names(vlabs)
names(xlabs) <- vlabs

neglabs <- varlabs$negdir
names(neglabs) <- varlabs$Variable
poslabs <- varlabs$posdir
names(poslabs) <- varlabs$Variable
```

```{r}
#| label: read-organize-data
#| include: false

# Get clinical data from RRFMP output -----
if(file.exists("DATA/preprocessed_data_current.RDS")){
  dat0 <- readRDS("DATA/FDpp_2024-05-25.RDS")
  dat <- readRDS("DATA/preprocessed_data_current.RDS")
  dat <- get_meanscores(dat, "Pre")
  dat <- get_meanscores(dat, "Post")
} else {
  dat0 <- readRDS("DATA/FDpp_2024-05-25.RDS")
  dat <- read_and_organize(dat0)
  dat <- get_meanscores(dat, "Pre")
  dat <- get_meanscores(dat, "Post")
}

# Get all pre- data (used in GOAL table, etc...) -----
datpre <- readRDS("DATA/FD_2024-05-25.RDS")
datpre <- read_and_organize(datpre)
datpre <- get_meanscores(datpre, "Pre")
```

```{r}
#| label: load-or-build-propensity-models
#| include: false

# List of surgeries -----
surglist <- c("Femoral_Derotation_Osteotomy", "Tibial_Derotation_Osteotomy", "Psoas_Release", "Hams_Lengthening", "Adductor_Release", "Gastroc_Soleus_Lengthening", "DFEO_Patellar_Advance", "Patellar_Advance",  "Foot_and_Ankle_Bone", "Foot_and_Ankle_Soft_Tissue","Neural_Rhizotomy", "Rectus_Transfer")

# Loop over list -----
for (s in surglist) {
  if(file.exists(glue("OUTPUT/Propensity_Models/prop_{s}.RDATA"))){
    # Load model
    load(glue("OUTPUT/Propensity_Models/prop_{s}.RDATA"))
    assign(glue("mod_{s}"), slist[[1]])
    assign(glue("opt_{s}"), slist[[2]])
    mod <- get(glue("mod_{s}"))
  } else {
    # Build model
    surg <- glue("interval_{s}")
    res <- build_propensity_mod(s, dat, fp2fn=1)
    mod <- res$mod
    opt <- res$opt
    metrics <- res$metrics
    # Save model
    slist <- list(mod, opt)
    names(slist) <- c(glue("mod_{s}"), glue("opt_{s}"))
    fmod <- glue("OUTPUT/Propensity_Models/prop_{s}.RDATA")
    save(slist, file = fmod)
  }
}
```

```{r}
#| label: compute-all-propensities
#| cache: false

# Compute propensities -----
if(is.null(dat$p_Femoral_Derotation_Osteotomy)){
  for (s in surglist) {
    cat("Computing Propensity for Surgery ", s, "\n")
    mod <- get(glue("mod_{s}"))
    set.seed(42)
    dat[[glue("p_{s}")]] <- predict(mod, dat[names(mod$X)])
  }
  saveRDS(dat, glue("DATA/preprocessed_data_{as.Date(now())}.RDS"))
}
```

# SMD Function

```{r}
#| label: smd-function

# This function takes a dataframe, surgery root name and outcome variable
# and returns the standardized mean difference in outcome variable between
# limbs undergoing teh surgery (treated) and not (control). It returns both
# a raw SMD and an SMD weighted using IPTW rules for computing ATT.

get_smd <- function(df, s, v){
  # Data for variables -----
  xx <- df %>% select(all_of(v))
  
  # Group
  grp <- df[[glue("interval_{s}")]]
  
  # Propensity -----
  e <- df[[glue("p_{s}")]]
  
  # Weight for ATT -----
  wt <- ifelse(grp == 1, 1, e / (1 - e))
  wtlims <- quantile(wt, probs = c(.01, .99))
  wt[wt < wtlims[1]] <- wtlims[1]
  wt[wt > wtlims[2]] <- wtlims[2]
  
  # Compute SMD raw and IPW weighted -----
  smdraw <- smd(x=xx, g=grp, w=1, na.rm=TRUE) %>% mutate(type="raw")
  smdipw <- smd(x=xx, g=grp, w=wt, na.rm=TRUE) %>% mutate(type="ipw")
  
  # Organize and return -----
  res <- 
    bind_rows(smdraw, smdipw) %>% 
    mutate(
      surg = s,
      estimate = abs(estimate)
    ) %>% 
    rename(
      value = estimate,
      name = variable
    ) %>% 
    relocate(surg, name)
  return(res)
}
```

# IPTW

## IPTW Function

```{r}
#| label: iptw-function

# Function to comput the IPTW effect size. Takes data, outcome, and surgery as input
# and returns the effect. Note it only samples one limb per subject x visit.

effIPTW <- function(df, o, s){
  # Function to compute the IPTW effect size -----
  oPost <- glue("{o}Post")
  
  # Build data (1-per, define "treat" and compute weight) -----
  set.seed(42)
  X <-
    df %>% 
    mutate(
      e = .data[[glue("p_{s}")]],
      treat = as.numeric(as.character(.data[[glue("interval_{s}")]])),
      PrZ = mean(treat, na.rm = T),
      # Treated weight = 1, Control weight = e/(1-e)
      wt = ifelse(treat == 1, 1, e / (1 - e))
    )
  
  # IPTW calculation -----
  temp <- 
    X %>% 
    group_by(treat) %>% 
    mutate(y = .data[[oPost]] - .data[[o]]) %>% 
    summarize(res = sum(y * wt, na.rm = T) / sum(wt, na.rm = T))
  
  eff <- temp$res[2] - temp$res[1]
  res <- tibble(surg = s, outcome = o, effect = eff)
  
  return(res)
}
```

## Compute IPTW 

```{r}
#| label: get-iptw

# Choose outcomes of interest -----
olist <- c("TOTAL_Score", "Activities_Sports_Rec", "ADL_Indep", "Braces_Mobility",
           "Gait_Func_Mobility", "Gait_Pattern_Appearance", "Image_Esteem", 
           "Pain_Discomfort_Fatigue")
olist <- c("GDI", "NDspeed", "FAQT", "NETND_OXYCONS_PCT")
olistPost <- glue("{olist}Post")

# Define minimum detectable change if available (for plotting) -----
GOALmdc <- c(TOTAL_Score = 8.9, Activities_Sports_Rec = 14.5, ADL_Indep = 13,
             Braces_Mobility = 32.9, Gait_Func_Mobility = 12.5, Image_Esteem = 17.8,
             Gait_Pattern_Appearance = 18.5, Pain_Discomfort_Fatigue = 16.3)

# Define surgeries of interest, filtering for small N if desired -----
nsurgmin = 20

nsurg <- 
  dat %>% 
  filter(
    if_all(c(all_of(olist), all_of(olistPost)), ~ !is.na(.))
  ) %>% 
  filter(SIDE == "L") %>% 
  select(glue("interval_{surglist}")) %>% 
  mutate(across(everything(), ~ ifelse(. == 1, 1, 0))) %>%
  summarise_all(sum) %>% 
  pivot_longer(everything()) %>% 
  arrange(value) %>% 
  filter(value >= nsurgmin) %>% 
  mutate(name = str_replace(name, "interval_", ""))

slist <- surglist[surglist %in% nsurg$name]
# slist <- c("Femoral_Derotation_Osteotomy")

# Choose data for effect estimation (note: single limb chosen in effect fn)-----
dateff <- 
  dat %>% 
  group_by(Exam_ID) %>% 
  slice_sample(n=1) %>% 
  ungroup() %>% 
  as_tibble()

# Compute effects and balance with errors estimate by bootstrapping -----
nboot = 30
reseff <- list()
ressmd <- list()

for (boot in 1:nboot) {
  effboot <- list()
  cat("Bootstrap Sample", boot, "\n\n")
  set.seed(boot)
  datboot <- slice_sample(dateff, prop = 1, replace = T)
  
  # Compute effects for each olist x each surgery in slist -----
  for (ss in slist) {
    effboot[[ss]] <- map_df(olist, \(oo) effIPTW(datboot, o=oo, s=ss))
  }
  
  reseff[[boot]] <- 
    effboot %>% 
    list_rbind() %>% 
    mutate(
      surg = fct_inorder(surg), 
      outcome = fct_inorder(outcome)
    )  
  
  # Compute balance for each surgery -----
  ressmd[[boot]] <- map_df(slist, \(ss) get_smd(datboot, s=ss, v=get_prop_model_vars(ss)))
}
```

## Plot IPTW Effects and Balance

```{r}
#| label: plot-effect

# Plot Effect -----
peffdat <- 
  reseff %>% 
  list_rbind() %>% 
  group_by(surg, outcome) %>% 
  reframe(
    N = n(),
    mu = mean(effect),
    sem = sd(effect),
    mdc = GOALmdc[as.character(outcome)]
  ) %>% 
  distinct() %>% 
  distinct() %>% 
  mutate(
    surg = fct_inorder(as.character(str_replace_all(surg, "_", " "))),
    outcome = fct_inorder(as.character(str_replace_all(outcome, "_", " ")))
  )

# Get limits (1sd pre) -----
efflims <- 
  dateff %>% 
  select(all_of(olist), all_of(glue("{olist}Post"))) %>% 
  pivot_longer(everything()) %>% 
  mutate(name = str_replace(name, "Post", "")) %>% 
  group_by(name) %>% 
  summarize(sd = sd(value, na.rm = T))

temp <- list()
for (oo in olist) {
  temp[[oo]] <- 
    ggplot(
      peffdat %>% filter(outcome == str_replace_all(oo, "_", " ")),
      aes(
        y = surg,
        x = mu,
        xmin = mu - 1.96 * sem,
        xmax = mu + 1.96 * sem,
        color = mu
      )
    ) + 
    geom_vline(xintercept = 0, linewidth = .2, color="grey50") +
    geom_vline(aes(xintercept = -mdc), linetype="dashed", linewidth=.2, color="grey50") +
    geom_vline(aes(xintercept = mdc), linetype="dashed", linewidth=.2, color="grey50") +
    geom_pointrange(size = .05, linewidth = .4) + 
    guides(color = "none") +
    scale_color_continuous_diverging(palette = "Red-Green") +
    xlim(c(-efflims$sd[efflims$name == oo], efflims$sd[efflims$name == oo])) +
    labs(
      title = str_replace_all(oo, "_", " "),
      x = "Causal Treatment Effect Size",
      y = ""
    ) +
    theme(
      plot.title.position = "plot",
      panel.spacing = unit(.2, "in"),
      strip.text = element_text(hjust = 0, face = "bold")
    )  
}

p_eff <- wrap_plots(temp, nrow = 2)
ggsave("junk_eff.png", p_eff, dpi = 600, width = 8, height = 6, bg = "white")

# Plot Balance -----
psmddat <- 
  ressmd %>% 
  list_rbind() %>% 
  group_by(surg, name, type) %>% 
  reframe(
    N = n(),
    mu = mean(value),
    sem = sd(value),
    mdc = GOALmdc[as.character(name)]
  ) %>% 
  distinct() %>% 
  mutate(
    surg = fct_inorder(as.character(str_replace_all(surg, "_", " "))),
    name = fct_inorder(as.character(str_replace_all(name, "_", " ")))
  )

# Get limits for plots -----
limsbal <- quantile(psmddat$mu, probs = c(0, 1))

temp <- list()
for (ss in slist) {
  temp[[ss]] <- 
    ggplot(
      psmddat %>% filter(surg == str_replace_all(ss, "_", " ")),
      aes(
        y = name,
        x = mu,
        xmin = mu - 1.96 * sem,
        xmax = mu + 1.96 * sem,
        color = type
      )
    ) + 
    geom_vline(xintercept =.10, linewidth = .2, color="grey50", linetype="dashed") +
    geom_pointrange(size = .05, linewidth = .4) + 
    scale_color_discrete_diverging() +
    guides(color = "none") +
    coord_cartesian(xlim = limsbal, clip = "off") +
    labs(
      title = str_replace_all(ss, "_", " "),
      x = "Standardized Mean Difference",
      y = "",
    ) +
    theme(
      plot.title.position = "plot",
      plot.title = element_text(size = rel(1)),
      axis.text.y = element_text(size = rel(.8))
    ) 
}

p_bal <- wrap_plots(temp, nrow = 3)
ggsave("junk_bal.png", p_bal, dpi = 600, width = 10, height = 8, bg = "white")
```

# S-Learner 

```{r}
#| label: estimate-effect-S
#| eval: true

# Not currently used. This is here so that we can compare X- to S- estimnates
# I did this, and it matched Kunzel (S produced slightly smaller effects with narrow uncertainty)

get_tauS <- function(dbuild, o, s){
  # Build model with treatment as "just another variable" -----
  buildmod <- function(dbuild, o, s){
    oPost <- glue("{o}Post")
    predvars <- get_pred_vars(o)
    predvars <- unique(c("age", "GMFCS", predvars, glue("interval_{surglist}")))
    
    xbuild <- 
      dbuild %>% 
      select(all_of(predvars))
    
    ybuild <- 
      dbuild %>% 
      mutate(del = .data[[oPost]] - .data[[o]]) %>% 
      pull(del)
    
    mod <- bartMachine(xbuild, ybuild, use_missing_data = T, seed = 42, verbose = FALSE)
    return(mod)
  } 
  
  modS <- buildmod(dbuild, o, s)
  
  # Treated and Control X
  x1 <- 
    dbuild %>%
    mutate(
      across(
        glue("interval_{s}"),
        ~ factor(1, levels = c(1, 0)))
    )
  
  x0 <- 
    dbuild %>%
    mutate(
      across(
        glue("interval_{s}"),
        ~ factor(0, levels = c(1, 0)))
    )
  
  Y1 <- predict(modS, x1[names(modS$X)])
  Y0 <- predict(modS, x0[names(modS$X)])
  
  tau <- Y1 - Y0
  
  return(list(tau=tau, X=dbuild))
}
```

# PSM 

```{r}
#| label: estimate-effect-psm

library(MatchIt)

o <- "meansta_Pel_Ang_Trn"
s <- "Femoral_Derotation_Osteotomy"

# Choose data 
X <-
  dat %>% 
  drop_na(all_of(c(o,  glue("{o}Post")))) %>% 
  group_by(Exam_ID) %>% 
  slice_sample(n=1) %>% 
  ungroup() %>% 
  data.frame()

df <- 
  X %>% 
  mutate(
    treat = as.numeric(as.character(.data[[glue("interval_{s}")]]))
  )

formdist <- as.formula(glue("treat ~ p_{s}"))
cal <- .05
names(cal) <- glue("p_{s}")

m.out <-
  matchit(
    formula = formdist,
    data = df,
    distance = "euclidean",
    method = "nearest",
    ratio = 1,
    replace = FALSE,
    caliper = cal,
    std.caliper = FALSE
  )

m.data <- match.data(m.out)

m.data <- 
  m.data %>% 
  mutate(yout = .data[[glue("{o}Post")]] - .data[[o]])

p_prop <- 
  ggplot(m.data, aes(x=.data[[glue("p_{s}")]], color=factor(treat))) + 
  geom_density() 

asdf <- 
  m.data %>% 
  group_by(treat) %>% 
  summarize(
    N = n(),
    mu = mean(yout), 
    sd = sd(yout)
  )

set.seed(42)
effdist <- rnorm(asdf$N[2], asdf$mu[2], asdf$sd[2]) - rnorm(asdf$N[1], asdf$mu[1], asdf$sd[1])
effmean <- mean(effdist)
effsem <- sd(effdist)/sqrt(length(effdist))

```


# X-Learner 

```{r}
#| label: estimate-effect-X

source("SCRIPTS/build_pred_outcome_BART.R")
source("SCRIPTS/get_pred_vars.R")

get_tauX <- function(dat, o, s){
  
  # Estimate Response ----- 
  buildmu <- function(X, o, s, treat){
    oPost <- glue("{o}Post")
    predvars <- get_pred_vars(o)
    predvars <- unique(c("age", "GMFCS", predvars, glue("interval_{surglist}")))
    
    # Select data with proper treatment status (0, 1) -----
    dbuild <- 
      X %>% 
      filter(!!sym(glue("interval_{s}")) == treat) %>% 
      select(all_of(predvars), all_of(o), all_of(oPost))
    
    xbuild <- 
      dbuild %>% 
      select(all_of(predvars))
    
    ybuild <- 
      dbuild %>% 
      mutate(del = .data[[oPost]] - .data[[o]]) %>% 
      pull(del)
    
    set.seed(42)
    mod <- bartMachine(xbuild, ybuild, use_missing_data = T, seed = 42, verbose = FALSE)
    
    return(list(mu=mod, xbuild=xbuild, ybuild=ybuild, dbuild=dbuild))
  }
  
  # Choose data 
  X <-
    dat %>% 
    drop_na(all_of(c(o,  glue("{o}Post")))) %>% 
    group_by(Exam_ID) %>% 
    slice_sample(n=1) %>% 
    ungroup() %>% 
    data.frame()
  
  # Below are the three steps defined in https://www.pnas.org/doi/full/10.1073/pnas.1804597116
  # Step 1: Estimate response functions
  mu0 <- buildmu(X, o, s, 0)
  mu1 <- buildmu(X, o, s, 1)
  
  # Step 2a: Impute treatment effects
  D1 <- mu1$ybuild - predict(mu0$mu, mu1$xbuild)
  D0 <- predict(mu1$mu, mu0$xbuild) - mu0$ybuild
  
  # Step 2b: Estimate tau
  tau1 <- bartMachine(mu1$xbuild, D1, use_missing_data = T, seed = 42, verbose = FALSE)
  tau0 <- bartMachine(mu0$xbuild, D0, use_missing_data = T, seed = 42, verbose = FALSE)
  t1 <- predict(tau1, X[names(tau1$X)])
  t0 <- predict(tau0, X[names(tau0$X)])
  
  # Step 3: Define the CATE estimate
  tau <- X[[glue("p_{s}")]] * t0  + (1 - X[[glue("p_{s}")]]) * t1
  
  return(list(tau=tau, dbuild=X))
}
```

```{r}
#| label: compute-tau-by-treatment-and-outcome

# Functions for mean and sd of effect -----
tauboot <- function(L, o){
  set.seed(42)
  b <- vector()
  for (kk in 1:100) {
    b[kk] <- mean(sample(L[[o]]$tau, replace = T))
  }
  m <- mean(b)
  s <- sd(b)
  return(list(mu=m, sem=s))
}


# List of outcomes -----
olist <- c("TOTAL_Score", "Activities_Sports_Rec", "ADL_Indep", "Braces_Mobility",
           "Gait_Func_Mobility", "Gait_Pattern_Appearance", "Image_Esteem", 
           "Pain_Discomfort_Fatigue")
# olist <- c("TOTAL_Score", "Gait_Pattern_Appearance")
# olist <- c("ANTEVERSION", "BIMAL", "meansta_Hip_Ang_Trn", "meansta_Foo_Ang_Trn", "meansta_Foo_Ang_Trn")

# Get list of surgeries, filter out small N -----
nsurg <- 
  dat %>% 
  filter(!is.na(!!sym(olist[1]))) %>% 
  filter(SIDE == "L") %>% 
  select(glue("interval_{surglist}")) %>% 
  mutate(across(everything(), ~ ifelse(. == 1, 1, 0))) %>%
  summarise_all(sum) %>% 
  pivot_longer(everything()) %>% 
  arrange(value) %>% 
  filter(value >= 10) %>% 
  mutate(name = str_replace(name, "interval_", ""))

slist <- surglist[surglist %in% nsurg$name]
# slist <- c("Femoral_Derotation_Osteotomy", "Tibial_Derotation_Osteotomy")

# Loop over surgeries and compute all effects -----
effectsX <- list()

for (ss in slist) {
  cat("\n\n\n", "Processing", ss, "\n\n\n")
  
  # Compute effects
  tempX <- 
    olist %>% 
    map(\(x) get_tauX(dat, o=x, s=ss), .progress=TRUE)
  names(tempX) <- olist
  
  # Get mean and sd
  res <- 
    olist %>% 
    map(\(x) tauboot(tempX, o=x))
  
  mu <- sapply(res, function(x) x$mu)
  sem <- sapply(res, function(x) x$sem)
  
  # Organize
  effectsX[[ss]] <- tibble(
    surgery = ss,
    outcome = olist,
    meaneffect = mu,
    sdeffect = sem,
    method = "X-Learner"
  )
} 

```

```{r}
#| label: organize-and-plot

temp <- 
  nsurg %>% 
  mutate(surgery = str_replace_all(name, "_", " ")) %>% 
  select(-name) %>% 
  rename(N = value)

# Organize effects into tibble -----
resX <- 
  effectsX %>% 
  list_rbind() %>% 
  mutate(
    surgery = fct_rev(fct_inorder(str_replace_all(surgery, "_", " "))),
    outcome = fct_inorder(str_replace_all(outcome, "_", " "))
  ) %>% 
  left_join(temp) %>% 
  mutate(
    surg = glue("{surgery} (N={N})"),
    surg = fct_rev(fct_inorder(surg))
  )


ggplot(
  resX,
  aes(
    x = meaneffect,
    y = surg, 
    xmin = meaneffect - 1.96 * sdeffect,
    xmax = meaneffect + 1.96 * sdeffect,
    color = (meaneffect - 1.96 * sdeffect > 0 | meaneffect + 1.96 * sdeffect < 0),
  )) +
  geom_pointrange(size = .1) +
  geom_vline(xintercept = 0) +
  geom_vline(xintercept = c(-5, 5), linetype = "dashed", color = "grey60", linewidth = .35) +
  facet_wrap( ~ fct_inorder(str_replace_all(outcome, "_", " "))) +
  scale_color_manual(values = c("grey80", "grey10"), name = "Significant Effect") +
  labs(
    title = "Average Treatment Effects",
    caption = "Non-zero effects are shown in black",
    y = "Surgery", 
    x = "Average Treatment Effect"
  ) +
  guides(color = "none") +
  theme_mhs(bs = 10) +
  theme(
    panel.spacing = unit(.25, "in"),
    plot.title.position = "plot"
  )

ggsave("junk.png", dpi = 600, width = 7, height = 7, bg = "white")
```

```{r}
#| label: plot-vs-covariates

# Choose outcome -----
o <- "maxswi_Kne_Ang_Sag"

# Choose surgery -----
s <- "Rectus_Transfer"

# Choose covariates -----
x <- c("maxswi_Kne_Ang_Sag", "NDspeed", "fo_Kne_Ang_Sag")

# Compute effects
eff <- get_tauX(dat, o, s)
names(tempX) <- olist

# Plot treatment effect vs. covariates -----
pdat <- 
  eff$dbuild %>% 
  select(all_of(x), glue("interval_{s}")) %>% 
  mutate(
    tau = eff$tau,
    surg = as.numeric(as.character(.data[[glue("interval_{s}")]]))
  ) %>% 
  select(-glue("interval_{s}")) %>% 
  pivot_longer(-c(tau, surg))

p <- 
  ggplot(pdat, aes(x=value, y=tau)) +
  geom_hline(yintercept = 0, color = "grey70", linewidth = .25) +
  geom_point(shape=1, alpha=.25, size=.5) + 
  facet_wrap(~ name, ncol=2, scales="free_x")

ggsave("junk_cov.png", dpi = 600, width = 7, height = 5, bg = "white")

```




